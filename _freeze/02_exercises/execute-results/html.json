{
  "hash": "10f5956f7ff75c2eade85d8de4b1bbc2",
  "result": {
    "markdown": "# Applied Exercises {-}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\nos <- import(\"os\")\nos$listdir(\".\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"03_exercises.qmd\"       \".Rhistory\"              \"03_main.qmd\"           \n [4] \"02_main.qmd\"            \".Rbuildignore\"          \"examples.md\"           \n [7] \"07_exercises.qmd\"       \"10_exercises.qmd\"       \"_quarto.yml\"           \n[10] \"bookclub-islp.Rproj\"    \"example_python.ipynb\"   \"09_main.qmd\"           \n[13] \"08_main.qmd\"            \"03_video.qmd\"           \"06_notes.qmd\"          \n[16] \".DS_Store\"              \"12_notes.qmd\"           \"08_video.qmd\"          \n[19] \"13_exercises.qmd\"       \"04_exercises.qmd\"       \"11_video.qmd\"          \n[22] \"05_video.qmd\"           \"images\"                 \"13_main.qmd\"           \n[25] \"12_main.qmd\"            \"01_notes.qmd\"           \"02_video.qmd\"          \n[28] \"how-to.qmd\"             \"ISLP_labs_R4DS\"         \"example_quarto.qmd\"    \n[31] \"13_notes.qmd\"           \"04_main.qmd\"            \"07_notes.qmd\"          \n[34] \"05_main.qmd\"            \"09_video.qmd\"           \"06_notes.ipynb\"        \n[37] \"docs\"                   \"index.qmd\"              \"04_video.qmd\"          \n[40] \"09_exercises.qmd\"       \"10_video.qmd\"           \"02_notes.qmd\"          \n[43] \"README.md\"              \"some_array.npy\"         \"08_exercises.qmd\"      \n[46] \".gitignore\"             \"figpath.png\"            \"01_video.qmd\"          \n[49] \"04_notes.qmd\"           \".github\"                \"style.css\"             \n[52] \"10_notes.qmd\"           \"cover.png\"              \"13_video.qmd\"          \n[55] \"07_video.qmd\"           \"sidebars-toggle.html\"   \"01_main.qmd\"           \n[58] \"09_notes.qmd\"           \"03_notes.qmd\"           \"07_main.qmd\"           \n[61] \"06_main.qmd\"            \"05_exercises.qmd\"       \".git\"                  \n[64] \"12_exercises.qmd\"       \"02_exercises.rmarkdown\" \"data\"                  \n[67] \"11_exercises.qmd\"       \"06_exercises.qmd\"       \"_freeze\"               \n[70] \"11_notes.qmd\"           \".Rproj.user\"            \".quarto\"               \n[73] \"ISLP_data\"              \"05_notes.qmd\"           \"02_exercises.qmd\"      \n[76] \"06_video.qmd\"           \"10_main.qmd\"            \"11_main.qmd\"           \n[79] \"12_video.qmd\"           \"08_notes.qmd\"          \n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n#%matplotlib inline\nfrom matplotlib.pyplot import subplots\nimport pandas as pd\nfrom ISLP import load_data\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npd.set_option('display.max_columns', None)\n#pd.set_option('display.max_rows', None)\n```\n:::\n\n\n\n## 8. This exercise relates to the `College` data set, which can be found in the file `College.csv` on the book website. It contains a number of variables for 777 different universities and colleges in the US. The variables are\n\n- `Private` : Public/private indicator\n- `Apps` : Number of applications received\n- `Accept` : Number of applicants accepted\n- `Enroll` : Number of new students enrolled\n- `Top10perc` : New students from top 10 % of high school class\n- `Top25perc` : New students from top 25 % of high school class\n- `F.Undergrad` : Number of full-time undergraduates\n- `P.Undergrad` : Number of part-time undergraduates\n- `Outstate` : Out-of-state tuition\n- `Room.Board` : Room and board costs\n- `Books` : Estimated book costs\n- `Personal` : Estimated personal spending\n- `PhD` : Percent of faculty with Ph.D.s\n- `Terminal` : Percent of faculty with terminal degree\n- `S.F.Ratio` : Student/faculty ratio\n- `perc.alumni` : Percent of alumni who donate\n- `Expend` : Instructional expenditure per student\n- `Grad.Rate` : Graduation rate\n\nBefore reading the data into `Python`, it can be viewed in Excel or a\ntext editor.\n\n### (a) Use the `pd.read_csv()` function to read the data into `Python`. Call the loaded data `college`. Make sure that you have the directory set to the correct location for the data.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ncollege = pd.read_csv('ISLP_data/College.csv')\ncollege\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                         Unnamed: 0 Private   Apps  Accept  Enroll  Top10perc  \\\n0      Abilene Christian University     Yes   1660    1232     721         23   \n1                Adelphi University     Yes   2186    1924     512         16   \n2                    Adrian College     Yes   1428    1097     336         22   \n3               Agnes Scott College     Yes    417     349     137         60   \n4         Alaska Pacific University     Yes    193     146      55         16   \n..                              ...     ...    ...     ...     ...        ...   \n772         Worcester State College      No   2197    1515     543          4   \n773               Xavier University     Yes   1959    1805     695         24   \n774  Xavier University of Louisiana     Yes   2097    1915     695         34   \n775                 Yale University     Yes  10705    2453    1317         95   \n776    York College of Pennsylvania     Yes   2989    1855     691         28   \n\n     Top25perc  F.Undergrad  P.Undergrad  Outstate  Room.Board  Books  \\\n0           52         2885          537      7440        3300    450   \n1           29         2683         1227     12280        6450    750   \n2           50         1036           99     11250        3750    400   \n3           89          510           63     12960        5450    450   \n4           44          249          869      7560        4120    800   \n..         ...          ...          ...       ...         ...    ...   \n772         26         3089         2029      6797        3900    500   \n773         47         2849         1107     11520        4960    600   \n774         61         2793          166      6900        4200    617   \n775         99         5217           83     19840        6510    630   \n776         63         2988         1726      4990        3560    500   \n\n     Personal  PhD  Terminal  S.F.Ratio  perc.alumni  Expend  Grad.Rate  \n0        2200   70        78       18.1           12    7041         60  \n1        1500   29        30       12.2           16   10527         56  \n2        1165   53        66       12.9           30    8735         54  \n3         875   92        97        7.7           37   19016         59  \n4        1500   76        72       11.9            2   10922         15  \n..        ...  ...       ...        ...          ...     ...        ...  \n772      1200   60        60       21.0           14    4469         40  \n773      1250   73        75       13.3           31    9189         83  \n774       781   67        75       14.4           20    8323         49  \n775      2115   96        96        5.8           49   40386         99  \n776      1250   75        75       18.1           28    4509         99  \n\n[777 rows x 19 columns]\n```\n:::\n:::\n\n\n\n### (b) Look at the data used in the notebook by creating and running a new cell with just the code `college` in it. You should notice that the first column is just the name of each university in a column named something like `Unnamed: 0`. We donâ€™t really want `pandas` to treat this as data. However, it may be handy to have these names for later. Try the following commands and similarly look at the resulting data frames:\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\ncollege2 = pd.read_csv('ISLP_data/College.csv', index_col=0)\n#college2\n\ncollege3 = college.rename({'Unnamed: 0': 'college'},\n  axis=1)\n#college3\n\ncollege3 = college3.set_index('college')\n#college3\n```\n:::\n\n\n\nThis has used the first column in the file as an `index` for the data frame. This means that `pandas` has given each row a name corresponding to the appropriate university. Now you should see that the first data column is `Private`. Note that the names of the colleges appear on the left of the table. We also introduced a new python object above: a *dictionary*, which is specified by `(key, value)` pairs. Keep your modified version of the data with the following:\n\n\n::: {.cell}\n\n```{.python .cell-code}\ncollege = college3\ncollege\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                               Private   Apps  Accept  Enroll  Top10perc  \\\ncollege                                                                    \nAbilene Christian University       Yes   1660    1232     721         23   \nAdelphi University                 Yes   2186    1924     512         16   \nAdrian College                     Yes   1428    1097     336         22   \nAgnes Scott College                Yes    417     349     137         60   \nAlaska Pacific University          Yes    193     146      55         16   \n...                                ...    ...     ...     ...        ...   \nWorcester State College             No   2197    1515     543          4   \nXavier University                  Yes   1959    1805     695         24   \nXavier University of Louisiana     Yes   2097    1915     695         34   \nYale University                    Yes  10705    2453    1317         95   \nYork College of Pennsylvania       Yes   2989    1855     691         28   \n\n                                Top25perc  F.Undergrad  P.Undergrad  Outstate  \\\ncollege                                                                         \nAbilene Christian University           52         2885          537      7440   \nAdelphi University                     29         2683         1227     12280   \nAdrian College                         50         1036           99     11250   \nAgnes Scott College                    89          510           63     12960   \nAlaska Pacific University              44          249          869      7560   \n...                                   ...          ...          ...       ...   \nWorcester State College                26         3089         2029      6797   \nXavier University                      47         2849         1107     11520   \nXavier University of Louisiana         61         2793          166      6900   \nYale University                        99         5217           83     19840   \nYork College of Pennsylvania           63         2988         1726      4990   \n\n                                Room.Board  Books  Personal  PhD  Terminal  \\\ncollege                                                                      \nAbilene Christian University          3300    450      2200   70        78   \nAdelphi University                    6450    750      1500   29        30   \nAdrian College                        3750    400      1165   53        66   \nAgnes Scott College                   5450    450       875   92        97   \nAlaska Pacific University             4120    800      1500   76        72   \n...                                    ...    ...       ...  ...       ...   \nWorcester State College               3900    500      1200   60        60   \nXavier University                     4960    600      1250   73        75   \nXavier University of Louisiana        4200    617       781   67        75   \nYale University                       6510    630      2115   96        96   \nYork College of Pennsylvania          3560    500      1250   75        75   \n\n                                S.F.Ratio  perc.alumni  Expend  Grad.Rate  \ncollege                                                                    \nAbilene Christian University         18.1           12    7041         60  \nAdelphi University                   12.2           16   10527         56  \nAdrian College                       12.9           30    8735         54  \nAgnes Scott College                   7.7           37   19016         59  \nAlaska Pacific University            11.9            2   10922         15  \n...                                   ...          ...     ...        ...  \nWorcester State College              21.0           14    4469         40  \nXavier University                    13.3           31    9189         83  \nXavier University of Louisiana       14.4           20    8323         49  \nYale University                       5.8           49   40386         99  \nYork College of Pennsylvania         18.1           28    4509         99  \n\n[777 rows x 18 columns]\n```\n:::\n:::\n\n\n### (c) Use the `describe()` method to produce a numerical summary of the variables in the data set.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ncollege.describe()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               Apps        Accept       Enroll   Top10perc   Top25perc  \\\ncount    777.000000    777.000000   777.000000  777.000000  777.000000   \nmean    3001.638353   2018.804376   779.972973   27.558559   55.796654   \nstd     3870.201484   2451.113971   929.176190   17.640364   19.804778   \nmin       81.000000     72.000000    35.000000    1.000000    9.000000   \n25%      776.000000    604.000000   242.000000   15.000000   41.000000   \n50%     1558.000000   1110.000000   434.000000   23.000000   54.000000   \n75%     3624.000000   2424.000000   902.000000   35.000000   69.000000   \nmax    48094.000000  26330.000000  6392.000000   96.000000  100.000000   \n\n        F.Undergrad   P.Undergrad      Outstate   Room.Board        Books  \\\ncount    777.000000    777.000000    777.000000   777.000000   777.000000   \nmean    3699.907336    855.298584  10440.669241  4357.526384   549.380952   \nstd     4850.420531   1522.431887   4023.016484  1096.696416   165.105360   \nmin      139.000000      1.000000   2340.000000  1780.000000    96.000000   \n25%      992.000000     95.000000   7320.000000  3597.000000   470.000000   \n50%     1707.000000    353.000000   9990.000000  4200.000000   500.000000   \n75%     4005.000000    967.000000  12925.000000  5050.000000   600.000000   \nmax    31643.000000  21836.000000  21700.000000  8124.000000  2340.000000   \n\n          Personal         PhD    Terminal   S.F.Ratio  perc.alumni  \\\ncount   777.000000  777.000000  777.000000  777.000000   777.000000   \nmean   1340.642214   72.660232   79.702703   14.089704    22.743887   \nstd     677.071454   16.328155   14.722359    3.958349    12.391801   \nmin     250.000000    8.000000   24.000000    2.500000     0.000000   \n25%     850.000000   62.000000   71.000000   11.500000    13.000000   \n50%    1200.000000   75.000000   82.000000   13.600000    21.000000   \n75%    1700.000000   85.000000   92.000000   16.500000    31.000000   \nmax    6800.000000  103.000000  100.000000   39.800000    64.000000   \n\n             Expend  Grad.Rate  \ncount    777.000000  777.00000  \nmean    9660.171171   65.46332  \nstd     5221.768440   17.17771  \nmin     3186.000000   10.00000  \n25%     6751.000000   53.00000  \n50%     8377.000000   65.00000  \n75%    10830.000000   78.00000  \nmax    56233.000000  118.00000  \n```\n:::\n:::\n\n\n\n\n### (d) Use the `pd.plotting.scatter_matrix()` function to produce a scatterplot matrix of the first columns `[Top10perc, Apps, Enroll]`. Recall that you can reference a list C of columns of a data frame `A` using `A[C]`.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n#fig, ax = subplots(figsize=(8, 8))\npd.plotting.scatter_matrix(college[['Top10perc','Apps','Enroll']])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([[<AxesSubplot:xlabel='Top10perc', ylabel='Top10perc'>,\n        <AxesSubplot:xlabel='Apps', ylabel='Top10perc'>,\n        <AxesSubplot:xlabel='Enroll', ylabel='Top10perc'>],\n       [<AxesSubplot:xlabel='Top10perc', ylabel='Apps'>,\n        <AxesSubplot:xlabel='Apps', ylabel='Apps'>,\n        <AxesSubplot:xlabel='Enroll', ylabel='Apps'>],\n       [<AxesSubplot:xlabel='Top10perc', ylabel='Enroll'>,\n        <AxesSubplot:xlabel='Apps', ylabel='Enroll'>,\n        <AxesSubplot:xlabel='Enroll', ylabel='Enroll'>]], dtype=object)\n```\n:::\n\n```{.python .cell-code}\n#plt.show()\n```\n\n::: {.cell-output-display}\n![](02_exercises_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n### (e) Use the boxplot() method of college to produce side-by-side boxplots of Outstate versus Private.\n\n\n::: {.cell}\n\n:::\n\n\n\n### (f) Create a new qualitative variable, called Elite, by binning the Top10perc variable into two groups based on whether or not the proportion of students coming from the top 10% of their high school classes exceeds 50%.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ncollege['Elite'] = pd.cut(college['Top10perc'],\n  [0,0.5,1],\n  labels=['No', 'Yes'])\n```\n:::\n\n\n\n\nUse the `value_counts()` method of `college['Elite']` to see how many elite universities there are. Finally, use the `boxplot()` method again to produce side-by-side boxplots of `Outstate` versus `Elite`.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ncollege['Elite'].value_counts()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nYes    3\nNo     0\nName: Elite, dtype: int64\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n### (g) Use the `plot.hist()` method of `college` to produce some histograms with difering numbers of bins for a few of the quantitative variables. The command `plt.subplots(2, 2)` may be useful: it will divide the plot window into four regions so that four plots can be made simultaneously. By changing the arguments you can divide the screen up in other combinations.\n\n\n::: {.cell}\n\n:::\n\n\n\n### (h) Continue exploring the data, and provide a brief summary of what you discover.\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## 9. This exercise involves the `Auto` data set studied in the lab. Make sure that the missing values have been removed from the data.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nAuto = pd.read_csv('ISLP_data/Auto.csv',\n                    na_values=['?'])\nAuto\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      mpg  cylinders  displacement  horsepower  weight  acceleration  year  \\\n0    18.0          8         307.0       130.0    3504          12.0    70   \n1    15.0          8         350.0       165.0    3693          11.5    70   \n2    18.0          8         318.0       150.0    3436          11.0    70   \n3    16.0          8         304.0       150.0    3433          12.0    70   \n4    17.0          8         302.0       140.0    3449          10.5    70   \n..    ...        ...           ...         ...     ...           ...   ...   \n392  27.0          4         140.0        86.0    2790          15.6    82   \n393  44.0          4          97.0        52.0    2130          24.6    82   \n394  32.0          4         135.0        84.0    2295          11.6    82   \n395  28.0          4         120.0        79.0    2625          18.6    82   \n396  31.0          4         119.0        82.0    2720          19.4    82   \n\n     origin                       name  \n0         1  chevrolet chevelle malibu  \n1         1          buick skylark 320  \n2         1         plymouth satellite  \n3         1              amc rebel sst  \n4         1                ford torino  \n..      ...                        ...  \n392       1            ford mustang gl  \n393       2                  vw pickup  \n394       1              dodge rampage  \n395       1                ford ranger  \n396       1                 chevy s-10  \n\n[397 rows x 9 columns]\n```\n:::\n:::\n\n\n\n### (a) Which of the predictors are quantitative, and which are qualitative?\n\nMpg, Displacement, Horsepower, Weight and Acceleration are quantitative. Cylinders, Year, Origin, and Name are qualitative.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nAuto.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 397 entries, 0 to 396\nData columns (total 9 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   mpg           397 non-null    float64\n 1   cylinders     397 non-null    int64  \n 2   displacement  397 non-null    float64\n 3   horsepower    392 non-null    float64\n 4   weight        397 non-null    int64  \n 5   acceleration  397 non-null    float64\n 6   year          397 non-null    int64  \n 7   origin        397 non-null    int64  \n 8   name          397 non-null    object \ndtypes: float64(4), int64(4), object(1)\nmemory usage: 28.0+ KB\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nAuto['cylinders'] = Auto['cylinders'].astype('object') \nAuto['cylinders']\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0      8\n1      8\n2      8\n3      8\n4      8\n      ..\n392    4\n393    4\n394    4\n395    4\n396    4\nName: cylinders, Length: 397, dtype: object\n```\n:::\n:::\n\n\n\n### (b) What is the range of each quantitative predictor? You can answer this using the `min()` and `max()` methods in `numpy`. \n\n\n::: {.cell}\n\n```{.python .cell-code}\nmpg_min = Auto['mpg'].min( )\nmpg_max = Auto['mpg'].max( )\n\nprint('The min and max miles per gallon are', (mpg_min, mpg_max))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe min and max miles per gallon are (9.0, 46.6)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndsp_min = Auto['displacement'].min( )\ndsp_max = Auto['displacement'].max( )\n\nprint('The min and max displacement are', (dsp_min, dsp_max))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe min and max displacement are (68.0, 455.0)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nhpwr_min = Auto['horsepower'].min( )\nhpwr_max = Auto['horsepower'].max( )\n\nprint('The min and max horsepower are', (hpwr_min, hpwr_max))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe min and max horsepower are (46.0, 230.0)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nwt_min = Auto['weight'].min( )\nwt_max = Auto['weight'].max( )\n\nprint('The min and max weights are', (wt_min, wt_max))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe min and max weights are (1613, 5140)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nacc_min = Auto['acceleration'].min( )\nacc_max = Auto['acceleration'].max( )\n\nprint('The min and max accelerations are', (acc_min, acc_max))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe min and max accelerations are (8.0, 24.8)\n```\n:::\n:::\n\n\n### (c) What is the mean and standard deviation of each quantitative predictor?\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nmpg_mean = Auto['mpg'].mean( )\nmpg_sd = Auto['mpg'].std( )\n\nprint('The mean and standard deviation of miles per gallon are', mpg_mean,'and', mpg_sd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe mean and standard deviation of miles per gallon are 23.515869017632248 and 7.825803928946562\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndsp_mean = Auto['displacement'].mean( )\ndsp_sd = Auto['displacement'].std( )\n\nprint('The mean and standard deviation of weight are', dsp_mean,'and', dsp_sd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe mean and standard deviation of weight are 193.53274559193954 and 104.37958329992945\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nhpwr_mean = Auto['horsepower'].mean( )\nhpwr_sd = Auto['horsepower'].std( )\n\nprint('The mean and standard deviation of horsepower are', hpwr_mean,'and', hpwr_sd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe mean and standard deviation of horsepower are 104.46938775510205 and 38.49115993282855\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nwt_mean = Auto['weight'].mean( )\nwt_sd = Auto['weight'].std( )\n\nprint('The mean and standard deviation of weight are', wt_mean,'and', wt_sd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe mean and standard deviation of weight are 2970.2619647355164 and 847.9041194897246\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nacc_mean = Auto['acceleration'].mean( )\nacc_sd = Auto['acceleration'].std( )\n\nprint('The mean and standard deviation of acceleration are', acc_mean,'and', acc_sd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe mean and standard deviation of acceleration are 15.555667506297214 and 2.7499952929761515\n```\n:::\n:::\n\n\n\n### (d) Now remove the 10th through 85th observations. What is the range, mean, and standard deviation of each predictor in the subset of the data that remains?\n\n\n::: {.cell}\n\n```{.python .cell-code}\nAuto_new = Auto.drop(Auto.index[10:85])\nAuto_new\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      mpg cylinders  displacement  horsepower  weight  acceleration  year  \\\n0    18.0         8         307.0       130.0    3504          12.0    70   \n1    15.0         8         350.0       165.0    3693          11.5    70   \n2    18.0         8         318.0       150.0    3436          11.0    70   \n3    16.0         8         304.0       150.0    3433          12.0    70   \n4    17.0         8         302.0       140.0    3449          10.5    70   \n..    ...       ...           ...         ...     ...           ...   ...   \n392  27.0         4         140.0        86.0    2790          15.6    82   \n393  44.0         4          97.0        52.0    2130          24.6    82   \n394  32.0         4         135.0        84.0    2295          11.6    82   \n395  28.0         4         120.0        79.0    2625          18.6    82   \n396  31.0         4         119.0        82.0    2720          19.4    82   \n\n     origin                       name  \n0         1  chevrolet chevelle malibu  \n1         1          buick skylark 320  \n2         1         plymouth satellite  \n3         1              amc rebel sst  \n4         1                ford torino  \n..      ...                        ...  \n392       1            ford mustang gl  \n393       2                  vw pickup  \n394       1              dodge rampage  \n395       1                ford ranger  \n396       1                 chevy s-10  \n\n[322 rows x 9 columns]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nmpg_min = Auto_new['mpg'].min( )\nmpg_max = Auto_new['mpg'].max( )\n\nprint('The min and max miles per gallon of the subsetted data are', (mpg_min, mpg_max))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe min and max miles per gallon of the subsetted data are (11.0, 46.6)\n```\n:::\n\n```{.python .cell-code}\nmpg_mean = Auto_new['mpg'].mean( )\nmpg_sd = Auto_new['mpg'].std( )\n\nprint('The mean and standard deviation of miles per gallon of the subsetted data are', mpg_mean,'and', mpg_sd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe mean and standard deviation of miles per gallon of the subsetted data are 24.40931677018633 and 7.913357147165568\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndsp_min = Auto_new['displacement'].min( )\ndsp_max = Auto_new['displacement'].max( )\n\nprint('The min and max displacement of the subsetted data are', (dsp_min, dsp_max))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe min and max displacement of the subsetted data are (68.0, 455.0)\n```\n:::\n\n```{.python .cell-code}\ndsp_mean = Auto_new['displacement'].mean( )\ndsp_sd = Auto_new['displacement'].std( )\n\nprint('The mean and standard deviation of weight of the subsetted data are', dsp_mean,'and', dsp_sd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe mean and standard deviation of weight of the subsetted data are 187.6801242236025 and 100.12092459330134\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nhpwr_min = Auto['horsepower'].min( )\nhpwr_max = Auto['horsepower'].max( )\n\nprint('The min and max horsepower of the subsetted data are', (hpwr_min, hpwr_max))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe min and max horsepower of the subsetted data are (46.0, 230.0)\n```\n:::\n\n```{.python .cell-code}\nhpwr_mean = Auto['horsepower'].mean( )\nhpwr_sd = Auto['horsepower'].std( )\n\nprint('The mean and standard deviation of horsepower of the subsetted data are', hpwr_mean,'and', hpwr_sd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe mean and standard deviation of horsepower of the subsetted data are 104.46938775510205 and 38.49115993282855\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nwt_min = Auto['weight'].min( )\nwt_max = Auto['weight'].max( )\n\nprint('The min and max weights of the subsetted data are', (wt_min, wt_max))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe min and max weights of the subsetted data are (1613, 5140)\n```\n:::\n\n```{.python .cell-code}\nwt_mean = Auto['weight'].mean( )\nwt_sd = Auto['weight'].std( )\n\nprint('The mean and standard deviation of weight of the subsetted data are', wt_mean,'and', wt_sd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe mean and standard deviation of weight of the subsetted data are 2970.2619647355164 and 847.9041194897246\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nacc_min = Auto['acceleration'].min( )\nacc_max = Auto['acceleration'].max( )\n\nprint('The min and max accelerations of the subsetted data are', (acc_min, acc_max))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe min and max accelerations of the subsetted data are (8.0, 24.8)\n```\n:::\n\n```{.python .cell-code}\nacc_mean = Auto['acceleration'].mean( )\nacc_sd = Auto['acceleration'].std( )\n\nprint('The mean and standard deviation of acceleration of the subsetted data are', acc_mean,'and', acc_sd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe mean and standard deviation of acceleration of the subsetted data are 15.555667506297214 and 2.7499952929761515\n```\n:::\n:::\n\n\n\n### (e) Using the full data set, investigate the predictors graphically, using scatterplots or other tools of your choice. Create some plots highlighting the relationships among the predictors. Comment on your findings.\n\n\n\n\n### (f) Suppose that we wish to predict gas mileage (`mpg`) on the basis of the other variables. Do your plots suggest that any of the other variables might be useful in predicting `mpg`? Justify your answer.\n\n\n\n## 10. This exercise involves the `Boston` housing data set.\n\n### (a) To begin, load in the `Boston` data set, which is part of the `ISLP` library.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nBoston = load_data(\"Boston\")\nBoston\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        crim    zn  indus  chas    nox     rm   age     dis  rad  tax  \\\n0    0.00632  18.0   2.31     0  0.538  6.575  65.2  4.0900    1  296   \n1    0.02731   0.0   7.07     0  0.469  6.421  78.9  4.9671    2  242   \n2    0.02729   0.0   7.07     0  0.469  7.185  61.1  4.9671    2  242   \n3    0.03237   0.0   2.18     0  0.458  6.998  45.8  6.0622    3  222   \n4    0.06905   0.0   2.18     0  0.458  7.147  54.2  6.0622    3  222   \n..       ...   ...    ...   ...    ...    ...   ...     ...  ...  ...   \n501  0.06263   0.0  11.93     0  0.573  6.593  69.1  2.4786    1  273   \n502  0.04527   0.0  11.93     0  0.573  6.120  76.7  2.2875    1  273   \n503  0.06076   0.0  11.93     0  0.573  6.976  91.0  2.1675    1  273   \n504  0.10959   0.0  11.93     0  0.573  6.794  89.3  2.3889    1  273   \n505  0.04741   0.0  11.93     0  0.573  6.030  80.8  2.5050    1  273   \n\n     ptratio  lstat  medv  \n0       15.3   4.98  24.0  \n1       17.8   9.14  21.6  \n2       17.8   4.03  34.7  \n3       18.7   2.94  33.4  \n4       18.7   5.33  36.2  \n..       ...    ...   ...  \n501     21.0   9.67  22.4  \n502     21.0   9.08  20.6  \n503     21.0   5.64  23.9  \n504     21.0   6.48  22.0  \n505     21.0   7.88  11.9  \n\n[506 rows x 13 columns]\n```\n:::\n:::\n\n\n\n### (b) How many rows are in this data set? How many columns? What do the rows and columns represent?\n\n\n\n### (c) Make some pairwise scatterplots of the predictors (columns) in this data set. Describe your fndings.\n\n\n\n### (d) Are any of the predictors associated with per capita crime rate? If so, explain the relationship.\n\n\n### (e) Do any of the suburbs of Boston appear to have particularly high crime rates? Tax rates? Pupil-teacher ratios? Comment on the range of each predictor.\n\n\n\n### (f) How many of the suburbs in this data set bound the Charles river?\n\n\n### (g) What is the median pupil-teacher ratio among the towns in this data set?\n\n\n\n\n### (h) Which suburb of Boston has lowest median value of owneroccupied homes? What are the values of the other predictors for that suburb, and how do those values compare to the overall ranges for those predictors? Comment on your fndings.\n\n\n\n\n### (i) In this data set, how many of the suburbs average more than seven rooms per dwelling? More than eight rooms per dwelling? Comment on the suburbs that average more than eight rooms per dwelling.\n\n\n\n\n\n",
    "supporting": [
      "02_exercises_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}